package main

import (
	"fmt"
	"io"
	"os"

	"bufio"
	"encoding/base64"
	//"strconv"
	"github.com/pions/webrtc"
	"./gst"
	"github.com/pions/webrtc/pkg/ice"
)

func main() {
	reader := bufio.NewReader(os.Stdin)
	rawSd, err := reader.ReadString('\n')
	if err != nil && err != io.EOF {
		panic(err)
	}
	rawSd = "dj0wDQpvPS0gMzg2MTQzNzQ0MjE3MTQxNDQxMyAyIElOIElQNCAxMjcuMC4wLjENCnM9LQ0KdD0wIDANCmE9Z3JvdXA6QlVORExFIGF1ZGlvIHZpZGVvDQphPW1zaWQtc2VtYW50aWM6IFdNUw0KbT1hdWRpbyA1ODIwOCBVRFAvVExTL1JUUC9TQVZQRiAxMTEgMTAzIDEwNCA5IDAgOCAxMDYgMTA1IDEzIDExMCAxMTIgMTEzIDEyNg0KYz1JTiBJUDQgMTkyLjE2OC4xLjI4DQphPXJ0Y3A6OSBJTiBJUDQgMC4wLjAuMA0KYT1jYW5kaWRhdGU6MTg5Nzg1MjExOSAxIHVkcCAyMTEzOTM3MTUxIDE5Mi4xNjguMS4yOCA1ODIwOCB0eXAgaG9zdCBnZW5lcmF0aW9uIDAgbmV0d29yay1jb3N0IDUwDQphPWljZS11ZnJhZzo2TnhVDQphPWljZS1wd2Q6Y2xVVU5UdEdmVXJ1dHpBUVZLVFk0Y2duDQphPWljZS1vcHRpb25zOnRyaWNrbGUNCmE9ZmluZ2VycHJpbnQ6c2hhLTI1NiA5MDo0QTpBNDo5ODpGQzpDODpBRjo5MDoyRDpEMzo5MDo2OTpGOTozQzo4RTo4MTo3Qjo5MTo5RDo1Njo2NTowRDo4MTo2NTo4MTpEODpDRjpGQzozNTo2NDo4MjpCQg0KYT1zZXR1cDphY3RwYXNzDQphPW1pZDphdWRpbw0KYT1leHRtYXA6MSB1cm46aWV0ZjpwYXJhbXM6cnRwLWhkcmV4dDpzc3JjLWF1ZGlvLWxldmVsDQphPXJlY3Zvbmx5DQphPXJ0Y3AtbXV4DQphPXJ0cG1hcDoxMTEgb3B1cy80ODAwMC8yDQphPXJ0Y3AtZmI6MTExIHRyYW5zcG9ydC1jYw0KYT1mbXRwOjExMSBtaW5wdGltZT0xMDt1c2VpbmJhbmRmZWM9MQ0KYT1ydHBtYXA6MTAzIElTQUMvMTYwMDANCmE9cnRwbWFwOjEwNCBJU0FDLzMyMDAwDQphPXJ0cG1hcDo5IEc3MjIvODAwMA0KYT1ydHBtYXA6MCBQQ01VLzgwMDANCmE9cnRwbWFwOjggUENNQS84MDAwDQphPXJ0cG1hcDoxMDYgQ04vMzIwMDANCmE9cnRwbWFwOjEwNSBDTi8xNjAwMA0KYT1ydHBtYXA6MTMgQ04vODAwMA0KYT1ydHBtYXA6MTEwIHRlbGVwaG9uZS1ldmVudC80ODAwMA0KYT1ydHBtYXA6MTEyIHRlbGVwaG9uZS1ldmVudC8zMjAwMA0KYT1ydHBtYXA6MTEzIHRlbGVwaG9uZS1ldmVudC8xNjAwMA0KYT1ydHBtYXA6MTI2IHRlbGVwaG9uZS1ldmVudC84MDAwDQptPXZpZGVvIDU4MjEwIFVEUC9UTFMvUlRQL1NBVlBGIDk2IDk3IDk4IDk5IDEwMCAxMDEgMTAyIDEyMyAxMjcgMTIyIDEyNSAxMDcgMTA4IDEwOSAxMjQNCmM9SU4gSVA0IDE5Mi4xNjguMS4yOA0KYT1ydGNwOjkgSU4gSVA0IDAuMC4wLjANCmE9Y2FuZGlkYXRlOjE4OTc4NTIxMTkgMSB1ZHAgMjExMzkzNzE1MSAxOTIuMTY4LjEuMjggNTgyMTAgdHlwIGhvc3QgZ2VuZXJhdGlvbiAwIG5ldHdvcmstY29zdCA1MA0KYT1pY2UtdWZyYWc6Nk54VQ0KYT1pY2UtcHdkOmNsVVVOVHRHZlVydXR6QVFWS1RZNGNnbg0KYT1pY2Utb3B0aW9uczp0cmlja2xlDQphPWZpbmdlcnByaW50OnNoYS0yNTYgOTA6NEE6QTQ6OTg6RkM6Qzg6QUY6OTA6MkQ6RDM6OTA6Njk6Rjk6M0M6OEU6ODE6N0I6OTE6OUQ6NTY6NjU6MEQ6ODE6NjU6ODE6RDg6Q0Y6RkM6MzU6NjQ6ODI6QkINCmE9c2V0dXA6YWN0cGFzcw0KYT1taWQ6dmlkZW8NCmE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldA0KYT1leHRtYXA6MyBodHRwOi8vd3d3LndlYnJ0Yy5vcmcvZXhwZXJpbWVudHMvcnRwLWhkcmV4dC9hYnMtc2VuZC10aW1lDQphPWV4dG1hcDo0IHVybjozZ3BwOnZpZGVvLW9yaWVudGF0aW9uDQphPWV4dG1hcDo1IGh0dHA6Ly93d3cuaWV0Zi5vcmcvaWQvZHJhZnQtaG9sbWVyLXJtY2F0LXRyYW5zcG9ydC13aWRlLWNjLWV4dGVuc2lvbnMtMDENCmE9ZXh0bWFwOjYgaHR0cDovL3d3dy53ZWJydGMub3JnL2V4cGVyaW1lbnRzL3J0cC1oZHJleHQvcGxheW91dC1kZWxheQ0KYT1leHRtYXA6NyBodHRwOi8vd3d3LndlYnJ0Yy5vcmcvZXhwZXJpbWVudHMvcnRwLWhkcmV4dC92aWRlby1jb250ZW50LXR5cGUNCmE9ZXh0bWFwOjggaHR0cDovL3d3dy53ZWJydGMub3JnL2V4cGVyaW1lbnRzL3J0cC1oZHJleHQvdmlkZW8tdGltaW5nDQphPXJlY3Zvbmx5DQphPXJ0Y3AtbXV4DQphPXJ0Y3AtcnNpemUNCmE9cnRwbWFwOjk2IFZQOC85MDAwMA0KYT1ydGNwLWZiOjk2IGdvb2ctcmVtYg0KYT1ydGNwLWZiOjk2IHRyYW5zcG9ydC1jYw0KYT1ydGNwLWZiOjk2IGNjbSBmaXINCmE9cnRjcC1mYjo5NiBuYWNrDQphPXJ0Y3AtZmI6OTYgbmFjayBwbGkNCmE9cnRwbWFwOjk3IHJ0eC85MDAwMA0KYT1mbXRwOjk3IGFwdD05Ng0KYT1ydHBtYXA6OTggVlA5LzkwMDAwDQphPXJ0Y3AtZmI6OTggZ29vZy1yZW1iDQphPXJ0Y3AtZmI6OTggdHJhbnNwb3J0LWNjDQphPXJ0Y3AtZmI6OTggY2NtIGZpcg0KYT1ydGNwLWZiOjk4IG5hY2sNCmE9cnRjcC1mYjo5OCBuYWNrIHBsaQ0KYT1ydHBtYXA6OTkgcnR4LzkwMDAwDQphPWZtdHA6OTkgYXB0PTk4DQphPXJ0cG1hcDoxMDAgSDI2NC85MDAwMA0KYT1ydGNwLWZiOjEwMCBnb29nLXJlbWINCmE9cnRjcC1mYjoxMDAgdHJhbnNwb3J0LWNjDQphPXJ0Y3AtZmI6MTAwIGNjbSBmaXINCmE9cnRjcC1mYjoxMDAgbmFjaw0KYT1ydGNwLWZiOjEwMCBuYWNrIHBsaQ0KYT1mbXRwOjEwMCBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDIwMDFmDQphPXJ0cG1hcDoxMDEgcnR4LzkwMDAwDQphPWZtdHA6MTAxIGFwdD0xMDANCmE9cnRwbWFwOjEwMiBIMjY0LzkwMDAwDQphPXJ0Y3AtZmI6MTAyIGdvb2ctcmVtYg0KYT1ydGNwLWZiOjEwMiB0cmFuc3BvcnQtY2MNCmE9cnRjcC1mYjoxMDIgY2NtIGZpcg0KYT1ydGNwLWZiOjEwMiBuYWNrDQphPXJ0Y3AtZmI6MTAyIG5hY2sgcGxpDQphPWZtdHA6MTAyIGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTE7cHJvZmlsZS1sZXZlbC1pZD00MmUwMWYNCmE9cnRwbWFwOjEyMyBydHgvOTAwMDANCmE9Zm10cDoxMjMgYXB0PTEwMg0KYT1ydHBtYXA6MTI3IEgyNjQvOTAwMDANCmE9cnRjcC1mYjoxMjcgZ29vZy1yZW1iDQphPXJ0Y3AtZmI6MTI3IHRyYW5zcG9ydC1jYw0KYT1ydGNwLWZiOjEyNyBjY20gZmlyDQphPXJ0Y3AtZmI6MTI3IG5hY2sNCmE9cnRjcC1mYjoxMjcgbmFjayBwbGkNCmE9Zm10cDoxMjcgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MTtwcm9maWxlLWxldmVsLWlkPTRkMDAzMg0KYT1ydHBtYXA6MTIyIHJ0eC85MDAwMA0KYT1mbXRwOjEyMiBhcHQ9MTI3DQphPXJ0cG1hcDoxMjUgSDI2NC85MDAwMA0KYT1ydGNwLWZiOjEyNSBnb29nLXJlbWINCmE9cnRjcC1mYjoxMjUgdHJhbnNwb3J0LWNjDQphPXJ0Y3AtZmI6MTI1IGNjbSBmaXINCmE9cnRjcC1mYjoxMjUgbmFjaw0KYT1ydGNwLWZiOjEyNSBuYWNrIHBsaQ0KYT1mbXRwOjEyNSBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NjQwMDMyDQphPXJ0cG1hcDoxMDcgcnR4LzkwMDAwDQphPWZtdHA6MTA3IGFwdD0xMjUNCmE9cnRwbWFwOjEwOCByZWQvOTAwMDANCmE9cnRwbWFwOjEwOSBydHgvOTAwMDANCmE9Zm10cDoxMDkgYXB0PTEwOA0KYT1ydHBtYXA6MTI0IHVscGZlYy85MDAwMA0K"
	fmt.Println("")
	sd, err := base64.StdEncoding.DecodeString(rawSd)
	if err != nil {
		panic(err)
	}

	/* Everything below is the pion-WebRTC API, thanks for using it! */

	// Setup the codecs you want to use.
	// We'll use the default ones but you can also define your own
	webrtc.RegisterDefaultCodecs()

	// Create a new RTCPeerConnection
	peerConnection, err := webrtc.New(webrtc.RTCConfiguration{
		ICEServers: []webrtc.RTCICEServer{
			{
				URLs: []string{"stun:stun.l.google.com:19302"},
			},
		},
	})
	if err != nil {
		panic(err)
	}

	// Set the handler for ICE connection state
	// This will notify you when the peer has connected/disconnected
	peerConnection.OnICEConnectionStateChange = func(connectionState ice.ConnectionState) {
		fmt.Printf("Connection State has changed %s \n", connectionState.String())
	}

	// Create a audio track
	opusTrack, err := peerConnection.NewRTCTrack(webrtc.DefaultPayloadTypeOpus, "audio", "pion1")
	if err != nil {
		panic(err)
	}
	_, err = peerConnection.AddTrack(opusTrack)
	if err != nil {
		panic(err)
	}

	// Create a video track
	vp8Track, err := peerConnection.NewRTCTrack(webrtc.DefaultPayloadTypeVP8, "video", "pion2")
	if err != nil {
		panic(err)
	}
	_, err = peerConnection.AddTrack(vp8Track)
	if err != nil {
		panic(err)
	}

	// Set the remote SessionDescription
	offer := webrtc.RTCSessionDescription{
		Type: webrtc.RTCSdpTypeOffer,
		Sdp:  string(sd),
	}
	if err := peerConnection.SetRemoteDescription(offer); err != nil {
		panic(err)
	}

	// Sets the LocalDescription, and starts our UDP listeners
	answer, err := peerConnection.CreateAnswer(nil)
	if err != nil {
		panic(err)
	}

	// Get the LocalDescription and take it to base64 so we can paste in browser
	fmt.Println(base64.StdEncoding.EncodeToString([]byte(answer.Sdp)))

	// Start pushing buffers on these tracks
	gst.CreatePipeline(webrtc.Opus, opusTrack.Samples).Start()
	gst.CreatePipeline("test", vp8Track.Samples).Start()
	select {}
}
